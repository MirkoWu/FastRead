package com.mirkowu.fastread.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mirkowu.fastread.bean.BookDetailBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_DETAIL_BEAN".
*/
public class BookDetailBeanDao extends AbstractDao<BookDetailBean, String> {

    public static final String TABLENAME = "BOOK_DETAIL_BEAN";

    /**
     * Properties of entity BookDetailBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", true, "_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property LongIntro = new Property(3, String.class, "longIntro", false, "LONG_INTRO");
        public final static Property Cover = new Property(4, String.class, "cover", false, "COVER");
        public final static Property Cat = new Property(5, String.class, "cat", false, "CAT");
        public final static Property MajorCate = new Property(6, String.class, "majorCate", false, "MAJOR_CATE");
        public final static Property MinorCate = new Property(7, String.class, "minorCate", false, "MINOR_CATE");
        public final static Property Creater = new Property(8, String.class, "creater", false, "CREATER");
        public final static Property _le = new Property(9, boolean.class, "_le", false, "_LE");
        public final static Property AllowMonthly = new Property(10, boolean.class, "allowMonthly", false, "ALLOW_MONTHLY");
        public final static Property AllowVoucher = new Property(11, boolean.class, "allowVoucher", false, "ALLOW_VOUCHER");
        public final static Property AllowBeanVoucher = new Property(12, boolean.class, "allowBeanVoucher", false, "ALLOW_BEAN_VOUCHER");
        public final static Property HasCp = new Property(13, boolean.class, "hasCp", false, "HAS_CP");
        public final static Property PostCount = new Property(14, int.class, "postCount", false, "POST_COUNT");
        public final static Property LatelyFollower = new Property(15, int.class, "latelyFollower", false, "LATELY_FOLLOWER");
        public final static Property FollowerCount = new Property(16, int.class, "followerCount", false, "FOLLOWER_COUNT");
        public final static Property WordCount = new Property(17, int.class, "wordCount", false, "WORD_COUNT");
        public final static Property SerializeWordCount = new Property(18, int.class, "serializeWordCount", false, "SERIALIZE_WORD_COUNT");
        public final static Property RetentionRatio = new Property(19, String.class, "retentionRatio", false, "RETENTION_RATIO");
        public final static Property Updated = new Property(20, String.class, "updated", false, "UPDATED");
        public final static Property IsSerial = new Property(21, boolean.class, "isSerial", false, "IS_SERIAL");
        public final static Property ChaptersCount = new Property(22, int.class, "chaptersCount", false, "CHAPTERS_COUNT");
        public final static Property LastChapter = new Property(23, String.class, "lastChapter", false, "LAST_CHAPTER");
        public final static Property Donate = new Property(24, boolean.class, "donate", false, "DONATE");
        public final static Property Copyright = new Property(25, String.class, "copyright", false, "COPYRIGHT");
    }


    public BookDetailBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BookDetailBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_DETAIL_BEAN\" (" + //
                "\"_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: _id
                "\"TITLE\" TEXT," + // 1: title
                "\"AUTHOR\" TEXT," + // 2: author
                "\"LONG_INTRO\" TEXT," + // 3: longIntro
                "\"COVER\" TEXT," + // 4: cover
                "\"CAT\" TEXT," + // 5: cat
                "\"MAJOR_CATE\" TEXT," + // 6: majorCate
                "\"MINOR_CATE\" TEXT," + // 7: minorCate
                "\"CREATER\" TEXT," + // 8: creater
                "\"_LE\" INTEGER NOT NULL ," + // 9: _le
                "\"ALLOW_MONTHLY\" INTEGER NOT NULL ," + // 10: allowMonthly
                "\"ALLOW_VOUCHER\" INTEGER NOT NULL ," + // 11: allowVoucher
                "\"ALLOW_BEAN_VOUCHER\" INTEGER NOT NULL ," + // 12: allowBeanVoucher
                "\"HAS_CP\" INTEGER NOT NULL ," + // 13: hasCp
                "\"POST_COUNT\" INTEGER NOT NULL ," + // 14: postCount
                "\"LATELY_FOLLOWER\" INTEGER NOT NULL ," + // 15: latelyFollower
                "\"FOLLOWER_COUNT\" INTEGER NOT NULL ," + // 16: followerCount
                "\"WORD_COUNT\" INTEGER NOT NULL ," + // 17: wordCount
                "\"SERIALIZE_WORD_COUNT\" INTEGER NOT NULL ," + // 18: serializeWordCount
                "\"RETENTION_RATIO\" TEXT," + // 19: retentionRatio
                "\"UPDATED\" TEXT," + // 20: updated
                "\"IS_SERIAL\" INTEGER NOT NULL ," + // 21: isSerial
                "\"CHAPTERS_COUNT\" INTEGER NOT NULL ," + // 22: chaptersCount
                "\"LAST_CHAPTER\" TEXT," + // 23: lastChapter
                "\"DONATE\" INTEGER NOT NULL ," + // 24: donate
                "\"COPYRIGHT\" TEXT);"); // 25: copyright
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_DETAIL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookDetailBean entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String longIntro = entity.getLongIntro();
        if (longIntro != null) {
            stmt.bindString(4, longIntro);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
 
        String cat = entity.getCat();
        if (cat != null) {
            stmt.bindString(6, cat);
        }
 
        String majorCate = entity.getMajorCate();
        if (majorCate != null) {
            stmt.bindString(7, majorCate);
        }
 
        String minorCate = entity.getMinorCate();
        if (minorCate != null) {
            stmt.bindString(8, minorCate);
        }
 
        String creater = entity.getCreater();
        if (creater != null) {
            stmt.bindString(9, creater);
        }
        stmt.bindLong(10, entity.get_le() ? 1L: 0L);
        stmt.bindLong(11, entity.getAllowMonthly() ? 1L: 0L);
        stmt.bindLong(12, entity.getAllowVoucher() ? 1L: 0L);
        stmt.bindLong(13, entity.getAllowBeanVoucher() ? 1L: 0L);
        stmt.bindLong(14, entity.getHasCp() ? 1L: 0L);
        stmt.bindLong(15, entity.getPostCount());
        stmt.bindLong(16, entity.getLatelyFollower());
        stmt.bindLong(17, entity.getFollowerCount());
        stmt.bindLong(18, entity.getWordCount());
        stmt.bindLong(19, entity.getSerializeWordCount());
 
        String retentionRatio = entity.getRetentionRatio();
        if (retentionRatio != null) {
            stmt.bindString(20, retentionRatio);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(21, updated);
        }
        stmt.bindLong(22, entity.getIsSerial() ? 1L: 0L);
        stmt.bindLong(23, entity.getChaptersCount());
 
        String lastChapter = entity.getLastChapter();
        if (lastChapter != null) {
            stmt.bindString(24, lastChapter);
        }
        stmt.bindLong(25, entity.getDonate() ? 1L: 0L);
 
        String copyright = entity.getCopyright();
        if (copyright != null) {
            stmt.bindString(26, copyright);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookDetailBean entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String longIntro = entity.getLongIntro();
        if (longIntro != null) {
            stmt.bindString(4, longIntro);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
 
        String cat = entity.getCat();
        if (cat != null) {
            stmt.bindString(6, cat);
        }
 
        String majorCate = entity.getMajorCate();
        if (majorCate != null) {
            stmt.bindString(7, majorCate);
        }
 
        String minorCate = entity.getMinorCate();
        if (minorCate != null) {
            stmt.bindString(8, minorCate);
        }
 
        String creater = entity.getCreater();
        if (creater != null) {
            stmt.bindString(9, creater);
        }
        stmt.bindLong(10, entity.get_le() ? 1L: 0L);
        stmt.bindLong(11, entity.getAllowMonthly() ? 1L: 0L);
        stmt.bindLong(12, entity.getAllowVoucher() ? 1L: 0L);
        stmt.bindLong(13, entity.getAllowBeanVoucher() ? 1L: 0L);
        stmt.bindLong(14, entity.getHasCp() ? 1L: 0L);
        stmt.bindLong(15, entity.getPostCount());
        stmt.bindLong(16, entity.getLatelyFollower());
        stmt.bindLong(17, entity.getFollowerCount());
        stmt.bindLong(18, entity.getWordCount());
        stmt.bindLong(19, entity.getSerializeWordCount());
 
        String retentionRatio = entity.getRetentionRatio();
        if (retentionRatio != null) {
            stmt.bindString(20, retentionRatio);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(21, updated);
        }
        stmt.bindLong(22, entity.getIsSerial() ? 1L: 0L);
        stmt.bindLong(23, entity.getChaptersCount());
 
        String lastChapter = entity.getLastChapter();
        if (lastChapter != null) {
            stmt.bindString(24, lastChapter);
        }
        stmt.bindLong(25, entity.getDonate() ? 1L: 0L);
 
        String copyright = entity.getCopyright();
        if (copyright != null) {
            stmt.bindString(26, copyright);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BookDetailBean readEntity(Cursor cursor, int offset) {
        BookDetailBean entity = new BookDetailBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // longIntro
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cover
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cat
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // majorCate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // minorCate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // creater
            cursor.getShort(offset + 9) != 0, // _le
            cursor.getShort(offset + 10) != 0, // allowMonthly
            cursor.getShort(offset + 11) != 0, // allowVoucher
            cursor.getShort(offset + 12) != 0, // allowBeanVoucher
            cursor.getShort(offset + 13) != 0, // hasCp
            cursor.getInt(offset + 14), // postCount
            cursor.getInt(offset + 15), // latelyFollower
            cursor.getInt(offset + 16), // followerCount
            cursor.getInt(offset + 17), // wordCount
            cursor.getInt(offset + 18), // serializeWordCount
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // retentionRatio
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // updated
            cursor.getShort(offset + 21) != 0, // isSerial
            cursor.getInt(offset + 22), // chaptersCount
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // lastChapter
            cursor.getShort(offset + 24) != 0, // donate
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25) // copyright
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookDetailBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLongIntro(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCover(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCat(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMajorCate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMinorCate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreater(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.set_le(cursor.getShort(offset + 9) != 0);
        entity.setAllowMonthly(cursor.getShort(offset + 10) != 0);
        entity.setAllowVoucher(cursor.getShort(offset + 11) != 0);
        entity.setAllowBeanVoucher(cursor.getShort(offset + 12) != 0);
        entity.setHasCp(cursor.getShort(offset + 13) != 0);
        entity.setPostCount(cursor.getInt(offset + 14));
        entity.setLatelyFollower(cursor.getInt(offset + 15));
        entity.setFollowerCount(cursor.getInt(offset + 16));
        entity.setWordCount(cursor.getInt(offset + 17));
        entity.setSerializeWordCount(cursor.getInt(offset + 18));
        entity.setRetentionRatio(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUpdated(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setIsSerial(cursor.getShort(offset + 21) != 0);
        entity.setChaptersCount(cursor.getInt(offset + 22));
        entity.setLastChapter(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDonate(cursor.getShort(offset + 24) != 0);
        entity.setCopyright(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BookDetailBean entity, long rowId) {
        return entity.get_id();
    }
    
    @Override
    public String getKey(BookDetailBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookDetailBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
